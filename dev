#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"
require "thor"

class Dev < Thor
  option :live, :type => :boolean, :desc => "Instead of a default build, build the live site"
  desc "build", "starts vagrant and runs a default build"
  def build
    vagrantUp
    defaultBuild unless options[:live]
    liveBuild if options[:live]
  end

  desc "reset", "resets the database to the last build"
  def reset
    vagrantUp
    resetContainer runningContainerName
  end

  desc "up", "Starts up the dev environment and uses the default build if it exists"
  def up
    vagrantUp
    startOrBuild
  end

  private

    def vagrantUp
      vagrantStatus = system( "vagrant up --provider virtualbox" )
      raise Thor::Error "vagrant failed to start" unless vagrantStatus
    end

    def mysqlStart(name, image = "mysql/base")
      mysqlStopCurrent
      mysqlStatus = system( "vagrant ssh db -c 'sudo docker run -d -name=\"#{name}\" -p 172.16.0.11:3306:3306 #{image}'" )
      raise Thor::Error "mysql failed to start" unless mysqlStatus
    end

    def mysqlStopCurrent
      runningContainers = `vagrant ssh db -c 'sudo docker ps' | grep mysqld`
      containers = runningContainers.scan(/(?mi)^[0-9a-f]+\s/)
      containers.each do |container|
        stopContainer container
      end
    end

    def defaultBuild
      newMysql "default"
      buildStatus = system( "vagrant ssh -c './faster_default_build.sh'")
      raise Thor::Error "The build failed" unless buildStatus
      tagContainer "default", "default"
    end

    def liveBuild
      newMysql "live"
      restoreCompleted = system( "vagrant ssh -c './db_util.sh http://dbdump.fccinteractive.com/#{mostRecentDump}'")
      raise Thor::Error "Failed to build the live site" unless restoreCompleted
      tagContainer "live", "live"
      upgradeRoutine
    end

    def upgradeRoutine
      upgradeCompleted = system( "vagrant ssh -c 'cd /srv/cms/utilities && ./upgrade_routine.sh'" )
      raise Thor::Error "Failed to do the upgrade routine" unless upgradeCompleted
    end

    def tagContainer(name, tag)
      stopContainer name
      system( "vagrant ssh db -c 'sudo ./commit.sh  #{name} #{tag}'" )
      rmContainer name
      mysqlStart name, tag
    end

    def stopContainer(identifier)
      system( "vagrant ssh db -c 'sudo docker kill #{identifier}'" )
    end

    def startContainer(identifier)
      containerStarted = system( "vagrant ssh db -c 'sudo docker start #{identifier}'" )
      raise Thor::Error "Failed to start container #{identifier}" unless containerStarted
    end

    def rmContainer(identifier)
      system( "vagrant ssh db -c 'sudo docker rm #{identifier}'" )
    end

    def runningContainerName
      container = `vagrant ssh db -c 'sudo docker ps' | grep /usr/sbin/mysqld`
      container.match(/(?mi)tcp\s+([a-z]+)/)[1]
    end

    def newMysql(name)
      stopContainer name
      rmContainer name
      mysqlStart name
    end

    def resetContainer(name)
      stopContainer name
      rmContainer name
      mysqlStart name, name
    end

    def imageExists(name)
      images = `vagrant ssh db -c 'sudo docker images'`
      images.include? name
    end

    def startOrBuild
      mysqlStopCurrent
      mysqlStarted = system( "vagrant ssh db -c 'sudo docker start default'" )
      imageOrBuild unless mysqlStarted
    end

    def imageOrBuild
      if imageExists "default"
        mysqlStart "default", "default"
      else
        defaultBuild
      end
    end

    def mostRecentDump
      dumps = `curl http://dbdump.fccinteractive.com`
      dumps.scan(/(?mi)href="(production\.fccnn\.com[0-9_-]+?\.sql\.gz)"/).last[0]
    end
end

Dev.start(ARGV)
